import{_ as s,c as e,o as n,aB as i}from"./chunks/framework.Cv0qBUI3.js";const k=JSON.parse('{"title":"MoreMaps.jl","description":"","frontmatter":{},"headers":[],"relativePath":"MoreMaps/index.md","filePath":"MoreMaps/index.md","lastUpdated":null}'),p={name:"MoreMaps/index.md"};function t(l,a,r,h,o,d){return n(),e("div",null,[...a[0]||(a[0]=[i(`<h1 id="MoreMaps.jlhttps://www.github.com/brendanjohnharris/MoreMaps.jl" tabindex="-1"><a href="https://www.github.com/brendanjohnharris/MoreMaps.jl" target="_blank" rel="noreferrer">MoreMaps.jl</a> <a class="header-anchor" href="#MoreMaps.jlhttps://www.github.com/brendanjohnharris/MoreMaps.jl" aria-label="Permalink to &quot;[MoreMaps.jl](https://www.github.com/brendanjohnharris/MoreMaps.jl) {#MoreMaps.jlhttps://www.github.com/brendanjohnharris/MoreMaps.jl}&quot;">​</a></h1><p>A flexible mapping framework for Julia that provides different parallel backends, progress tracking, and iteration patterns.</p><h2 id="Features" tabindex="-1">Features <a class="header-anchor" href="#Features" aria-label="Permalink to &quot;Features {#Features}&quot;">​</a></h2><ul><li><p><strong>Multiple backends</strong>: Sequential, Threads, Distributed, and Dagger execution</p></li><li><p><strong>Progress tracking</strong>: Support for various progress-logging backends</p></li><li><p><strong>Nested array support</strong>: Map over specific leaf types in nested array structures</p></li><li><p><strong>Cartesian expansions</strong>: Easy cartesian product iterations</p></li></ul><h2 id="Quick-Start" tabindex="-1">Quick Start <a class="header-anchor" href="#Quick-Start" aria-label="Permalink to &quot;Quick Start {#Quick-Start}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MoreMaps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Basic usage with default sequential backend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, C, x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use threading for parallel execution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_threaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Threaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_threaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, C_threaded, x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add progress tracking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C_progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Threaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InfoProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, C_progress, x)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">100-element Vector{Float64}:</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.6464162295296969</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.5468085204770361</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.7187274678929995</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.9032325464197789</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.9776118335271263</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.7015501109708505</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.6232817510758458</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.3310397830983595</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.9531381945091043</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.6726383959839335</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> ⋮</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.7750953315880582</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.5460792042091587</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.42504893065005583</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.4206292924381015</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.4866165887004032</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.6010919817785227</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.32005220985461463</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.7787493779008517</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> 0.8183268344678941</span></span></code></pre></div><h2 id="Basics" tabindex="-1">Basics <a class="header-anchor" href="#Basics" aria-label="Permalink to &quot;Basics {#Basics}&quot;">​</a></h2><p>The basis of a <code>MoreMaps</code> map is the <code>Chart</code> type, which configures how mapping operations are executed.</p><p>A <code>Chart</code> has the following fields:</p><ul><li><p><code>backend</code>: Specifies the execution backend</p></li><li><p><code>progress</code>: Configures the progress logging behavior</p></li><li><p><code>leaf</code>: Defines the element type where recursion terminates, for mapping nested arrays</p></li><li><p><code>expansion</code>: Determines the expansion strategy (e.g. Cartesian product)</p></li></ul><p>A chart can be constructed using keywords or arbitrary-order positional arguments. The default <code>Chart()</code> reproduces <code>Base.map()</code>, and is constructed as:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sequential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No parallel execution; similar to Base.map</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          progress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No progress logging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          leaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MoreMaps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">All,                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Map over each element of the root array, like Base.map</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          expansion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoExpansion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Map over the original input arrays, as for Base.map</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sequential</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), MoreMaps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">All, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoExpansion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In any order</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Default behavior</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="Mapping" tabindex="-1">Mapping <a class="header-anchor" href="#Mapping" aria-label="Permalink to &quot;Mapping {#Mapping}&quot;">​</a></h3><p>Once you have a Chart, pass it to the standard <code>Base.map</code> function:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MoreMaps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, C, x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, x)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">true</span></span></code></pre></div><p>See the following pages for details on configuring a <code>Chart</code>:</p><ul><li><p><a href="./MoreMaps/backends">Backends</a> - Execution strategies (Sequential, Threaded, Distributed, Dagger)</p></li><li><p><a href="./MoreMaps/progress">Progress</a> - Progress tracking options</p></li><li><p><a href="./MoreMaps/leaf">Leaves</a> - Nested array handling</p></li><li><p><a href="./MoreMaps/expansion">Expansions</a> - Cartesian product iterations</p></li></ul><hr><hr><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Custom Progress Intervals</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Control the frequency of progress updates:</span></span></code></pre></div><p>@example MoreMaps using MoreMaps x = randn(1000)</p><h1 id="More-frequent-updates" tabindex="-1">More frequent updates <a class="header-anchor" href="#More-frequent-updates" aria-label="Permalink to &quot;More frequent updates {#More-frequent-updates}&quot;">​</a></h1><p>C_frequent = Chart(Sequential(), InfoProgress(20))</p><h1 id="Less-frequent-updates" tabindex="-1">Less frequent updates <a class="header-anchor" href="#Less-frequent-updates" aria-label="Permalink to &quot;Less frequent updates {#Less-frequent-updates}&quot;">​</a></h1><p>C_sparse = Chart(Sequential(), InfoProgress(3))</p><h1 id="The-number-determines-how-many-progress-messages-are-logged" tabindex="-1">The number determines how many progress messages are logged <a class="header-anchor" href="#The-number-determines-how-many-progress-messages-are-logged" aria-label="Permalink to &quot;The number determines how many progress messages are logged {#The-number-determines-how-many-progress-messages-are-logged}&quot;">​</a></h1><p>with_logger(NullLogger()) do # Suppress output for docs map(x -&gt; (sleep(0.001); x^2), C_frequent, x) map(x -&gt; (sleep(0.001); x^2), C_sparse, x) end</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Performance Considerations</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Progress logging has minimal overhead, but for very fast operations on small arrays, consider using \`NoProgress\`:</span></span></code></pre></div><p>@example MoreMaps using MoreMaps x = randn(10) fast_op = x -&gt; x + 1</p><h1 id="For-fast-operations,-skip-progress" tabindex="-1">For fast operations, skip progress <a class="header-anchor" href="#For-fast-operations,-skip-progress" aria-label="Permalink to &quot;For fast operations, skip progress {#For-fast-operations,-skip-progress}&quot;">​</a></h1><p>C_fast = Chart(Threaded(), NoProgress()) y = map(fast_op, C_fast, x)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;!-- ## Leaves</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Nested Array Handling</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MoreMaps.jl can map over nested array structures, applying functions at specific levels of nesting.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Leaf Types</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The \`leaf\` parameter of a \`Chart\` determines which array types are treated as atomic units (leaves) during mapping.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### All (Default)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Treats all arrays as leaves - applies the function to the outermost array:</span></span></code></pre></div><p>@example MoreMaps x = [1:3, 4:6, 7:9] C = Chart(leaf = All) y = map(sum, C, x)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>### Union{} (Deep Mapping)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Maps over the deepest nested elements:</span></span></code></pre></div><p>@example MoreMaps x = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] C = Chart(leaf = Union{}) y = map(x -&gt; x^2, C, x)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>### Specific Types</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Specify a concrete type to control the mapping depth:</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Nested-structure:-Array-of-Arrays-of-Ranges" tabindex="-1">Nested structure: Array of Arrays of Ranges <a class="header-anchor" href="#Nested-structure:-Array-of-Arrays-of-Ranges" aria-label="Permalink to &quot;Nested structure: Array of Arrays of Ranges {#Nested-structure:-Array-of-Arrays-of-Ranges}&quot;">​</a></h1><p>x = [[1:2, 3:4], [5:6, 7:8]]</p><h1 id="Map-over-the-ranges-innermost" tabindex="-1">Map over the ranges (innermost) <a class="header-anchor" href="#Map-over-the-ranges-innermost" aria-label="Permalink to &quot;Map over the ranges (innermost) {#Map-over-the-ranges-innermost}&quot;">​</a></h1><p>C_range = Chart(leaf = UnitRange) y_range = map(sum, C_range, x)</p><h1 id="Map-over-the-inner-arrays" tabindex="-1">Map over the inner arrays <a class="header-anchor" href="#Map-over-the-inner-arrays" aria-label="Permalink to &quot;Map over the inner arrays {#Map-over-the-inner-arrays}&quot;">​</a></h1><p>C_array = Chart(leaf = Vector) y_array = map(length, C_array, x)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Type Stability</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MoreMaps maintains type stability when possible:</span></span></code></pre></div><p>@example MoreMaps x = randn(10)</p><h1 id="Type-stable-with-concrete-leaf-type" tabindex="-1">Type-stable with concrete leaf type <a class="header-anchor" href="#Type-stable-with-concrete-leaf-type" aria-label="Permalink to &quot;Type-stable with concrete leaf type {#Type-stable-with-concrete-leaf-type}&quot;">​</a></h1><p>C_stable = Chart(leaf = Float64) y = @inferred map(sqrt ∘ abs, C_stable, x)</p><h1 id="type-inference-with-union-type-inference-with-union" tabindex="-1">Type inference with Union{} {#Type-inference-with-Union <a class="header-anchor" href="#type-inference-with-union-type-inference-with-union" aria-label="Permalink to &quot;Type inference with Union{} {#Type-inference-with-Union{}}&quot;">​</a></h1><p>x_nested = [[1.0, 2.0], [3.0, 4.0]] C_nested = Chart(leaf = Union{})</p><h1 id="note-union-may-not-always-be-type-stable-note-union" tabindex="-1">Note: Union{} may not always be type-stable {#Note:-Union <a class="header-anchor" href="#note-union-may-not-always-be-type-stable-note-union" aria-label="Permalink to &quot;Note: Union{} may not always be type-stable {#Note:-Union{}-may-not-always-be-type-stable}&quot;">​</a></h1><p>y_nested = map(x -&gt; x^2, C_nested, x_nested)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Working with Complex Structures</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Mixed-nested-structure" tabindex="-1">Mixed nested structure <a class="header-anchor" href="#Mixed-nested-structure" aria-label="Permalink to &quot;Mixed nested structure {#Mixed-nested-structure}&quot;">​</a></h1><p>data = [ [1.0:0.5:3.0, 4.0:0.5:6.0], [7.0:0.5:9.0, 10.0:0.5:12.0] ]</p><h1 id="Process-at-different-levels" tabindex="-1">Process at different levels <a class="header-anchor" href="#Process-at-different-levels" aria-label="Permalink to &quot;Process at different levels {#Process-at-different-levels}&quot;">​</a></h1><p>C_outer = Chart(leaf = All) result_outer = map(x -&gt; length(x), C_outer, data)</p><p>C_ranges = Chart(leaf = StepRangeLen) result_ranges = map(x -&gt; collect(x), C_ranges, data)</p><p>C_deep = Chart(leaf = Union{}) result_deep = map(x -&gt; round(x), C_deep, data)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Multiple Iterator Support</span></span>
<span class="line"><span></span></span>
<span class="line"><span>When using multiple iterators, leaf types apply to all inputs:</span></span></code></pre></div><p>@example MoreMaps x = [[1, 2], [3, 4]] y = [[5, 6], [7, 8]]</p><p>C = Chart(leaf = Vector{Int}) z = map(+, C, x, y)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Performance Tips</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. Use concrete leaf types when possible for better type stability</span></span>
<span class="line"><span>2. \`All\` (default) is fastest for non-nested arrays</span></span>
<span class="line"><span>3. \`Union{}\` provides maximum flexibility but may sacrifice type stability</span></span>
<span class="line"><span>4. Specify the most specific leaf type that matches your use case</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Expansions</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Cartesian Product Expansions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MoreMaps.jl supports automatic expansion of iterators into cartesian products, enabling efficient multi-dimensional mapping operations.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Basic Expansion</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use \`Iterators.product\` as the expansion function to create cartesian products:</span></span></code></pre></div><p>@example MoreMaps x = 1:3 y = 4:6</p><p>C = Chart(expansion = Iterators.product) z = map(+, C, x, y)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Multi-dimensional Expansions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Works with any number of iterators:</span></span></code></pre></div><p>@example MoreMaps x = 1:2 y = 3:4 z = 5:6</p><p>C = Chart(expansion = Iterators.product) result = map((a, b, c) -&gt; a + b + c, C, x, y, z)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Combining with Backends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Expansions work with all execution backends:</span></span></code></pre></div><p>@example MoreMaps x = 1:10 y = 1:10</p><h1 id="Sequential-with-expansion" tabindex="-1">Sequential with expansion <a class="header-anchor" href="#Sequential-with-expansion" aria-label="Permalink to &quot;Sequential with expansion {#Sequential-with-expansion}&quot;">​</a></h1><p>C_seq = Chart(Sequential(), NoProgress(), All, Iterators.product) z_seq = map(*, C_seq, x, y)</p><h1 id="Threaded-with-expansion" tabindex="-1">Threaded with expansion <a class="header-anchor" href="#Threaded-with-expansion" aria-label="Permalink to &quot;Threaded with expansion {#Threaded-with-expansion}&quot;">​</a></h1><p>C_thread = Chart(Threaded(), NoProgress(), All, Iterators.product) z_thread = map(*, C_thread, x, y)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Custom Expansion Functions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>You can provide custom expansion functions:</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Custom-expansion-that-zips-instead-of-products" tabindex="-1">Custom expansion that zips instead of products <a class="header-anchor" href="#Custom-expansion-that-zips-instead-of-products" aria-label="Permalink to &quot;Custom expansion that zips instead of products {#Custom-expansion-that-zips-instead-of-products}&quot;">​</a></h1><p>function zip_expansion(iters...) return zip(iters...) end</p><p>x = 1:5 y = 6:10</p><h1 id="Note:-This-would-need-proper-implementation-in-the-package" tabindex="-1">Note: This would need proper implementation in the package <a class="header-anchor" href="#Note:-This-would-need-proper-implementation-in-the-package" aria-label="Permalink to &quot;Note: This would need proper implementation in the package {#Note:-This-would-need-proper-implementation-in-the-package}&quot;">​</a></h1><h1 id="C-Chartexpansion-zip_expansion" tabindex="-1">C = Chart(expansion = zip_expansion) <a class="header-anchor" href="#C-Chartexpansion-zip_expansion" aria-label="Permalink to &quot;C = Chart(expansion = zip_expansion) {#C-Chartexpansion-zip_expansion}&quot;">​</a></h1><h1 id="z-map,-C,-x,-y" tabindex="-1">z = map(+, C, x, y) <a class="header-anchor" href="#z-map,-C,-x,-y" aria-label="Permalink to &quot;z = map(+, C, x, y) {#z-map,-C,-x,-y}&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Expansion with Nested Arrays</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Expansions interact with leaf types:</span></span></code></pre></div><p>@example MoreMaps x = [[1, 2], [3, 4]] y = [[5, 6], [7, 8]]</p><h1 id="Expand-outer-arrays" tabindex="-1">Expand outer arrays <a class="header-anchor" href="#Expand-outer-arrays" aria-label="Permalink to &quot;Expand outer arrays {#Expand-outer-arrays}&quot;">​</a></h1><p>C_outer = Chart(leaf = All, expansion = Iterators.product) result_outer = map((a, b) -&gt; length(a) + length(b), C_outer, x, y)</p><h1 id="Expand-at-leaf-level" tabindex="-1">Expand at leaf level <a class="header-anchor" href="#Expand-at-leaf-level" aria-label="Permalink to &quot;Expand at leaf level {#Expand-at-leaf-level}&quot;">​</a></h1><p>C_leaf = Chart(leaf = Vector{Int}, expansion = Iterators.product) result_leaf = map((a, b) -&gt; a .+ b, C_leaf, x, y)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Performance Considerations</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Small-expansions-are-efficient" tabindex="-1">Small expansions are efficient <a class="header-anchor" href="#Small-expansions-are-efficient" aria-label="Permalink to &quot;Small expansions are efficient {#Small-expansions-are-efficient}&quot;">​</a></h1><p>x = 1:10 y = 1:10 C = Chart(Threaded(), NoProgress(), All, Iterators.product) @time z = map(+, C, x, y)</p><h1 id="Be-careful-with-large-expansions" tabindex="-1">Be careful with large expansions <a class="header-anchor" href="#Be-careful-with-large-expansions" aria-label="Permalink to &quot;Be careful with large expansions {#Be-careful-with-large-expansions}&quot;">​</a></h1><h1 id="x-1:1000" tabindex="-1">x = 1:1000 <a class="header-anchor" href="#x-1:1000" aria-label="Permalink to &quot;x = 1:1000 {#x-1:1000}&quot;">​</a></h1><h1 id="y-1:1000" tabindex="-1">y = 1:1000 <a class="header-anchor" href="#y-1:1000" aria-label="Permalink to &quot;y = 1:1000 {#y-1:1000}&quot;">​</a></h1><h1 id="This-creates-a-1,000,000-element-result!" tabindex="-1">This creates a 1,000,000 element result! <a class="header-anchor" href="#This-creates-a-1,000,000-element-result!" aria-label="Permalink to &quot;This creates a 1,000,000 element result! {#This-creates-a-1,000,000-element-result!}&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## Practical Applications</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### Parameter Sweeps</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Sweep-over-parameter-combinations" tabindex="-1">Sweep over parameter combinations <a class="header-anchor" href="#Sweep-over-parameter-combinations" aria-label="Permalink to &quot;Sweep over parameter combinations {#Sweep-over-parameter-combinations}&quot;">​</a></h1><p>alphas = [0.1, 0.5, 1.0] betas = [1, 2, 3]</p><p>C = Chart(Threaded(), InfoProgress(5), All, Iterators.product)</p><p>results = map(C, alphas, betas) do α, β # Simulate some computation sum(α * sin(x) + β * cos(x) for x in 1:100) end</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>### Grid Computations</span></span></code></pre></div><p>@example MoreMaps</p><h1 id="Create-a-2D-grid-evaluation" tabindex="-1">Create a 2D grid evaluation <a class="header-anchor" href="#Create-a-2D-grid-evaluation" aria-label="Permalink to &quot;Create a 2D grid evaluation {#Create-a-2D-grid-evaluation}&quot;">​</a></h1><p>x_range = range(-1, 1, length=20) y_range = range(-1, 1, length=20)</p><p>C = Chart(Threaded(), NoProgress(), All, Iterators.product)</p><p>grid = map((x, y) -&gt; x^2 + y^2, C, x_range, y_range)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>## NoExpansion (Default)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The default behavior performs element-wise mapping without expansion:</span></span></code></pre></div><p>@example MoreMaps x = 1:3 y = 4:6</p><p>C = Chart() # Default: NoExpansion() z = map(+, C, x, y) # Element-wise addition \`\`\` –&gt;</p>`,113)])])}const g=s(p,[["render",t]]);export{k as __pageData,g as default};
