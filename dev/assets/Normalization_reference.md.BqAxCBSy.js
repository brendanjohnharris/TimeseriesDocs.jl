import{_ as r,C as p,c as o,o as h,j as s,aB as e,G as t,a as n,w as l}from"./chunks/framework.Cv0qBUI3.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Normalization/reference.md","filePath":"Normalization/reference.md","lastUpdated":null}'),k={name:"Normalization/reference.md"},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""};function m(u,i,b,f,N,A){const a=p("Badge");return h(),o("div",null,[s("details",d,[s("summary",null,[i[0]||(i[0]=s("a",{id:"Normalization.AbstractModifier",href:"#Normalization.AbstractModifier"},[s("span",{class:"jlbinding"},"Normalization.AbstractModifier")],-1)),i[1]||(i[1]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractModifier{N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNormalization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractNormalization{eltype(N)}</span></span></code></pre></div><p>Abstract type for modifiers that wrap an existing normalization, altering its behavior (for example, by making it robust to outliers or NaN-safe).</p><p><strong>Interface</strong></p><p>Any concrete modifier type <code>Modifier &lt;: AbstractModifier</code> (such as <code>Robust</code>, <code>Mixed</code>, or <code>NaNSafe</code>) can be applied to a concrete normalization type <code>Normalization &lt;: AbstractNormalization</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier{Normalization} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># A combined type with a free `eltype` of `Any`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier{Normalization{Float64}} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># A concrete `eltype` of `Float64`</span></span></code></pre></div><p>All <code>AbstractNormalization</code> constructors and traits are then defined for <code>AbstractModifier</code> types.</p>',6)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/brendanjohnharris/Normalization.jl/blob/105bc173df78b943a2b5b2284b35e29e141df8df/src/Modifiers.jl#L4-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"Normalization.AbstractNormalization",href:"#Normalization.AbstractNormalization"},[s("span",{class:"jlbinding"},"Normalization.AbstractNormalization")],-1)),i[5]||(i[5]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractNormalization</span></span></code></pre></div><p>Abstract type for normalizations.</p><p><strong>Constructors</strong></p><p>You can work with <code>AbstractNormalization</code>s as either types or instances. The type approach is useful for concise code, whereas the instance approach is useful for performant mutations. In the examples below we use the <code>ZScore</code> normalization, but the same syntax applies to all <code>Normalization</code>s.</p><p><strong>Fit to a type</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ZScore, X; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># eltype inferred from X</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ZScore{Float32}, X; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># eltype set to Float32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">isa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractNormalization </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">isa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZScore </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Returns a concrete AbstractNormalization</span></span></code></pre></div><p><strong>Fit to an instance</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ZScore{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initializes with empty parameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">isa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractNormalization </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">isa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ZScore </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Returns a concrete AbstractNormalization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isfit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N, X; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fit normalization in-place, and update the \`dims\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Normalization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p><strong>Normalization and denormalization</strong></p><p>With a fit normalization, there are two approaches to normalizing data: in-place and out-of-place.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normalize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_X, N) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Normalizes in-place, updating _X</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, N) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Normalizes out-of-place, returning a new array</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, ZScore; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For convenience, fits and then normalizes</span></span></code></pre></div><p>For most normalizations, there is a corresponding denormalization that transforms data to the original space.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> denormalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Y, N) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Denormalizes out-of-place, returning a new array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">≈</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">denormalize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Y, N) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Denormalizes in-place, updating Y</span></span></code></pre></div><p><strong>Properties and traits</strong></p><p><strong>Type traits</strong></p><ul><li><p><code>Normalization.estimators(N::Union{&lt;:AbstractNormalization,Type{&lt;:AbstractNormalization})</code> returns the estimators <code>N</code> as a tuple of functions</p></li><li><p><code>forward(N::Union{&lt;:AbstractNormalization,Type{&lt;:AbstractNormalization})</code> returns the forward normalization function (e.g. x-&gt; x - 𝜇 / 𝜎 for the <code>ZScore</code>)</p></li><li><p>inverse(N::Union{&lt;:AbstractNormalization,Type{&lt;:AbstractNormalization}})<code>returns the inverse normalization function e.g.</code>forward(N)(ps...) |&gt; InverseFunctions.inverse\`</p></li><li><p><code>eltype(N::Union{&lt;:AbstractNormalization,Type{&lt;:AbstractNormalization})</code> returns the eltype of the normalization parameters</p></li></ul><p><strong>Concrete properties</strong></p><ul><li><p><code>Normalization.dims(N::&lt;:AbstractNormalization)</code> returns the dimensions of the normalization. The dimensions are determined by <code>dims</code> and correspond to the mapped slices of the input array.</p></li><li><p><code>params(N::&lt;:AbstractNormalization)</code> returns the parameters of <code>N</code> as a tuple of arrays. The dimensions of arrays are the complement of <code>dims</code>.</p></li><li><p><code>isfit(N::&lt;:AbstractNormalization)</code> checks if all parameters are non-empty</p></li></ul>`,18)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/brendanjohnharris/Normalization.jl/blob/105bc173df78b943a2b5b2284b35e29e141df8df/src/Normalization.jl#L21-L80",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"Normalization.Mixed",href:"#Normalization.Mixed"},[s("span",{class:"jlbinding"},"Normalization.Mixed")],-1)),i[9]||(i[9]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mixed{N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNormalization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractModifier{N}</span></span></code></pre></div><p>A modifier type that wraps an existing normalization and replaces its estimators with a mixture of robust and classical statistics.</p><p><code>Mixed</code> uses the median instead of the mean if the interquartile range (IQR) is nonzero, otherwise it falls back to the mean. For the standard deviation, it uses the IQR (divided by 1.35) if nonzero, otherwise it falls back to the standard deviation. This makes the normalization robust to outliers while still using classical estimators when the data is degenerate.</p>',3)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/brendanjohnharris/Normalization.jl/blob/105bc173df78b943a2b5b2284b35e29e141df8df/src/Modifiers.jl#L64-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[12]||(i[12]=s("a",{id:"Normalization.NaNSafe",href:"#Normalization.NaNSafe"},[s("span",{class:"jlbinding"},"Normalization.NaNSafe")],-1)),i[13]||(i[13]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NaNSafe{N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNormalization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractModifier{N}</span></span></code></pre></div><p>A modifier type that wraps an existing normalization and replaces its estimators with NaN-safe versions.</p><p><code>NaNSafe</code> modifies the estimators of the underlying normalization so that they ignore any <code>NaN</code> values in the input data.</p>',3)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/brendanjohnharris/Normalization.jl/blob/105bc173df78b943a2b5b2284b35e29e141df8df/src/Modifiers.jl#L84-L90",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[i[16]||(i[16]=s("a",{id:"Normalization.Robust",href:"#Normalization.Robust"},[s("span",{class:"jlbinding"},"Normalization.Robust")],-1)),i[17]||(i[17]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Robust{N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNormalization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractModifier{N}</span></span></code></pre></div><p>A modifier type that wraps an existing normalization and replaces its estimators with robust statistics.</p><p><code>Robust</code> replaces the mean with the median and the standard deviation with the interquartile range (IQR, divided by 1.35 so that it matches the standard deviation for normally distributed data). This makes the normalization more robust to outliers.</p>',3)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/brendanjohnharris/Normalization.jl/blob/105bc173df78b943a2b5b2284b35e29e141df8df/src/Modifiers.jl#L42-L49",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const z=r(k,[["render",m]]);export{C as __pageData,z as default};
