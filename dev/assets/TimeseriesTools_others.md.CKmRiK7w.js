import{_ as r,C as o,c as p,o as h,j as i,aB as t,G as a,a as n,w as l}from"./chunks/framework.Cv0qBUI3.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"TimeseriesTools/others.md","filePath":"TimeseriesTools/others.md","lastUpdated":null}'),d={name:"TimeseriesTools/others.md"},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""};function C(F,s,_,j,v,w){const e=o("Badge");return h(),p("div",null,[i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"TimeseriesTools.closeneighbours-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:Real",href:"#TimeseriesTools.closeneighbours-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:Real"},[i("span",{class:"jlbinding"},"TimeseriesTools.closeneighbours")],-1)),s[1]||(s[1]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">closeneighbours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y; Δt)</span></span></code></pre></div><p>Constructs a sparse matrix of distances between neighbouring spikes in two sorted spike trains.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: A sorted array representing the first spike train.</p></li><li><p><code>y</code>: A sorted array representing the second spike train.</p></li><li><p><code>Δt</code>: The maximum time difference allowed for two spikes to be considered neighbours.</p></li></ul><p><strong>Returns</strong></p><p>A sparse matrix <code>D</code> where <code>D[i, j]</code> represents the distance between the <code>i</code>-th spike in <code>x</code> and the <code>j</code>-th spike in <code>y</code>, for pairs of spikes within <code>Δt</code> of each other.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L158-L170",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}",href:"#TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}"},[i("span",{class:"jlbinding"},"TimeseriesTools.gammarenewal!")],-1)),s[5]||(s[5]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gammarenewal!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spikes, α, θ; t0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> randn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> α </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> θ, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a sequence of gamma-distributed renewal spikes.</p><p>Arguments:</p><ul><li><p><code>spikes::AbstractVector</code>: The vector to store the generated spikes.</p></li><li><p><code>α</code>: The shape parameter of the gamma distribution.</p></li><li><p><code>θ</code>: The scale parameter of the gamma distribution.</p></li><li><p><code>t0</code>: The initial time of the spike train. Defaults to a random value drawn from a normal distribution with mean of 0 and standard deviation equal to the mean firing rate.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments to be passed to <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}"><code>pointprocess!</code></a>.</p></li></ul>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L273-L285",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[8]||(s[8]=i("a",{id:"TimeseriesTools.gammarenewal-Tuple{Any, Vararg{Any}}",href:"#TimeseriesTools.gammarenewal-Tuple{Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools.gammarenewal")],-1)),s[9]||(s[9]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gammarenewal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N, α, θ; t0)</span></span></code></pre></div><p>Generate a spike train with inter-spike intervals drawn from a Gamma process.</p><p><strong>Arguments</strong></p><ul><li><p><code>N</code>: Number of spikes to generate.</p></li><li><p><code>α</code>: Shape parameter of the gamma distribution (equivalent to the mean ISI divided by the</p></li></ul><p>Fano factor).</p><ul><li><p><code>θ</code>: Scale parameter of the gamma distribution (equivalent to the Fano factor).</p></li><li><p><code>t0</code>: The initial time of the spike train, prior to the first sampled spike. Defaults to a</p></li></ul><p>random value drawn from a normal distribution with mean of 0 and standard deviation equal to the mean firing rate.</p><p><strong>Returns</strong></p><ul><li>A <a href="./@ref"><code>SpikeTrain</code></a> containing the generated spike times.</li></ul><p>See also <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools.gammarenewal!-Tuple{AbstractVector, Any, Any}"><code>gammarenewal!</code></a>.</p>',10)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L293-L311",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[12]||(s[12]=i("a",{id:"TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}",href:"#TimeseriesTools.pointprocess!-Tuple{Any, Distributions.Distribution}"},[i("span",{class:"jlbinding"},"TimeseriesTools.pointprocess!")],-1)),s[13]||(s[13]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pointprocess!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spikes, D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default_rng</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), t0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simulate a point process by sampling inter-spike intervals from a given distribution.</p><p><strong>Arguments</strong></p><ul><li><p><code>spikes</code>: An array to store the generated spike times.</p></li><li><p><code>D::Distribution</code>: The distribution from which to sample inter-spike intervals.</p></li><li><p><code>rng</code>: (optional) The random number generator to use. Defaults to <code>Random.default_rng()</code>.</p></li><li><p><code>t0</code>: (optional) The initial time. Defaults to <code>0.0</code>.</p></li></ul>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L252-L262",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[16]||(s[16]=i("a",{id:"TimeseriesTools.stoic-Tuple{Any, Any}",href:"#TimeseriesTools.stoic-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"TimeseriesTools.stoic")],-1)),s[17]||(s[17]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stoic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b; kpi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npi, σ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> σ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the spike-train overlap-integral coefficient between two spike trains, after normalizing both convolutions to unit energy</p><p>See the unnamed metric from &quot;Schreiber S, Fellous JM, Whitmer JH, Tiesinga PHE, Sejnowski TJ (2003). A new correlation based measure of spike timing reliability. Neurocomputing 52:925-931.&quot;</p><p><strong>Arguments</strong></p><ul><li><p><code>a</code>: Spike train a.</p></li><li><p><code>b</code>: Spike train b.</p></li><li><p><code>kpi</code>: Kernel product integral, a function of the distance between two spikes. Default is <code>npi</code>, the integral of two gaussians with equal variance at a given distance from each other.</p></li><li><p><code>σ</code>: Width parameter of the kernel. For <code>npi</code>, this is the width of the unit-mass Gaussian kernels. Default is <code>0.025</code>.</p></li><li><p><code>Δt</code>: Time window for considering spikes as close. Default is <code>σ * 10</code>.</p></li></ul>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L187-L201",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[20]||(s[20]=i("a",{id:"TimeseriesTools.sttc-Tuple{Any, Any}",href:"#TimeseriesTools.sttc-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"TimeseriesTools.sttc")],-1)),s[21]||(s[21]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sttc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b; Δt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The spike-time tiling coefficient, a measure of correlation between spike trains [1].</p><p><strong>Arguments</strong></p><ul><li><p><code>a::Vector{&lt;:Real}</code>: A sorted vector of spike times.</p></li><li><p><code>b::Vector{&lt;:Real}</code>: A second sorted vector of spike times .</p></li><li><p><code>Δt::Real=0.025</code>: The time window for calculating the STTC.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>sttc::Real</code>: The STTC value.</li></ul><p><strong>References</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[1] [Cutts &amp; Eglen 2014](https://doi.org/10.1523%2FJNEUROSCI.2767-14.2014)</span></span></code></pre></div>',8)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/SpikeTrains.jl#L33-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[24]||(s[24]=i("a",{id:"TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, Vararg{Any}}",href:"#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim{<:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R<:AbstractRange}}, B} where {T, B}, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools._energyspectrum")],-1)),s[25]||(s[25]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Computes the energy spectrum of a regularly sampled time series <code>x</code> with an optional minimum frequency <code>f_min</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L66-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[28]||(s[28]=i("a",{id:"TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 2, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, B}, Vararg{Any}}",href:"#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 2, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, B}, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools._energyspectrum")],-1)),s[29]||(s[29]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the energy spectrum of a time series using the fast Fourier transform.</p><p>If <code>f_min &gt; 0</code>, the energy spectrum is calculated for windows of the time series determined by <code>f_min</code>, the minimum frequency that will be resolved in the spectrum. If <code>f_min &gt; 0</code>, the second dimension of the output will correspond to the windows. For an averaged periodogram, see <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}"><code>energyspectrum</code></a>.</p><p>If the input time series is a <a href="./@ref"><code>UnitfulTimeseries</code></a>, the frequency will also have units. Moreover if the elements of <code>x</code> are unitful, so are the elements of the spectrum.</p><p><strong>Examples</strong></p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span>julia&gt; using TimeseriesTools</span></span>
<span class="line"><span>julia&gt; t = range(0.0, stop=1.0, length=1000);</span></span>
<span class="line"><span>julia&gt; x = sin.(2 * π * 5 * t);</span></span>
<span class="line"><span>julia&gt; ts = RegularTimeseries(x, t);</span></span>
<span class="line"><span>julia&gt; S = _energyspectrum(ts);</span></span>
<span class="line"><span>julia&gt; S isa MultivariateSpectrum</span></span></code></pre></div>`,6)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L76-L96",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[32]||(s[32]=i("a",{id:"TimeseriesTools._powerspectrum-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}, Vararg{Any}}",href:"#TimeseriesTools._powerspectrum-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools._powerspectrum")],-1)),s[33]||(s[33]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_powerspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the power spectrum of a time series <code>x</code> in Welch periodogram windows. Note that the <code>_powerspectrum</code> is simply the <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a> divided by the duration of each window. See <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L115-L121",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[36]||(s[36]=i("a",{id:"TimeseriesTools.colorednoise-Union{Tuple{T}, Tuple{AbstractRange{T}, Vararg{Any}}} where T",href:"#TimeseriesTools.colorednoise-Union{Tuple{T}, Tuple{AbstractRange{T}, Vararg{Any}}} where T"},[i("span",{class:"jlbinding"},"TimeseriesTools.colorednoise")],-1)),s[37]||(s[37]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">colorednoise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; α</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a colored-noise time series with a specified power-law exponent <code>α</code> on the given times <code>ts</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>ts</code>: An <code>AbstractRange</code> representing the time range of the generated noise.</p></li><li><p><code>α</code>: The power-law exponent of the colored noise, which will have a spectrum given by 1/f^α. Defaults to 2.0.</p></li></ul><p><strong>Returns</strong></p><ul><li>A <a href="./@ref"><code>Timeseries</code></a> containing the generated colored noise.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeseriesTools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pink_noise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> colorednoise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; α</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pink_noise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">isa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegularTimeseries</span></span></code></pre></div>`,8)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L139-L158",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[40]||(s[40]=i("a",{id:"TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}",href:"#TimeseriesTools.energyspectrum-Tuple{Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools.energyspectrum")],-1)),s[41]||(s[41]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">energyspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegularTimeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the average energy spectrum of a regularly sampled time series <code>x</code>. <code>f_min</code> determines the minimum frequency that will be resolved in the spectrum. See <a href="/TimeseriesDocs.jl/dev/TimeseriesTools/others#TimeseriesTools._energyspectrum-Tuple{AbstractToolsArray{T, 1, &lt;:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A&lt;:(DimensionalData.Dimensions.TimeDim{&lt;:DimensionalData.Dimensions.Lookups.Sampled{T, R} where {T, R&lt;:AbstractRange}}), B} where {T, B}, Vararg{Any}}"><code>_energyspectrum</code></a>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L103-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[44]||(s[44]=i("a",{id:"TimeseriesTools.powerspectrum-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}, Vararg{Any}}",href:"#TimeseriesTools.powerspectrum-Tuple{AbstractToolsArray{T, N, <:Tuple{A, Vararg{DimensionalData.Dimensions.Dimension}} where A<:DimensionalData.Dimensions.TimeDim, B} where {T, N, B}, Vararg{Any}}"},[i("span",{class:"jlbinding"},"TimeseriesTools.powerspectrum")],-1)),s[45]||(s[45]=n()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">powerspectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTimeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f_min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">samplingrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes the average power spectrum of a time series <code>x</code> using the Welch periodogram method.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[46]||(s[46]=[i("a",{href:"https://github.com/brendanjohnharris/TimeseriesTools.jl/blob/3c40df6b5201d6d6d3f890c9f30d07673003f7dc/src/Spectra.jl#L127-L131",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const x=r(d,[["render",C]]);export{S as __pageData,x as default};
